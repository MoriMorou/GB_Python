# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.


import math


def my_round(number, ndigits):
    print(round(number, ndigits))
    pass


my_round(2.1234567, 5)
my_round(2.1999967, 5)
my_round(2.9999967, 5)


# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить

def lucky_ticket(ticket_number):
    sumOne = 0
    sumTwo = 0
    lt = []
    while ticket_number > 0:
        lt.append(ticket_number % 10)
        # // Целочисленное деление
        ticket_number //= 10
    lt.reverse()
    print(lt)

    if len(lt) >= 6:
        for i in lt[0:3]:
            sumOne += i
        for i in lt[0:-3]:
            sumTwo += i
        if sumOne == sumTwo:
            return "OK"
        else:
            return "Not Ok"
    else:
        return "Your ticket don't have 6 numbers"


print(lucky_ticket(123006))
print(lucky_ticket(12321))
print(lucky_ticket(436751))

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

import math


def fibonacci(n, m):
    f = []
    a, b = 0, 1
    for num in range(m):
        f.append(b)
        a, b = b, a + b
    n -= 1
    result = [f[i] for i in range(n, m)]
    print("Fibonacci is: ", result)


fibonacci(1, 8)


# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()


def sort_to_max(origin_list):
    print(origin_list)
    #    i = 0
    #    j = 1
    #    while j < len(origin_list):
    #        while i < (len(origin_list) - 1):
    for j in range(len(origin_list), 0, -1):
        for i in range(0, len(origin_list) - 1):
            if origin_list[i] > origin_list[i + 1]:
                origin_list[i], origin_list[i + 1] = origin_list[i + 1], origin_list[i]
    #            i += 1
    #        j += 1
    #        i = 0
    print(origin_list)
    pass


sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.


# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

A1, A2, A3, A4 = (2, 3), (0, 2), (4, 1), (6, 2)


def isParallelogram(a, b, c, d):
    p1 = False
    p2 = False

    ab = math.sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2)
    cb = math.sqrt((b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2)
    cd = math.sqrt((d[0] - c[0]) ** 2 + (d[1] - c[1]) ** 2)
    ad = math.sqrt((d[0] - a[0]) ** 2 + (d[1] - a[1]) ** 2)

    if ab == cd and cb == ad:
        print("Equality of parties: true")
        p1 = True
    else:
        print("Equality of parties: false")

    hO1 = ((a[0] + c[0]) / 2, (a[1] + c[1]) / 2)
    hO2 = ((b[0] + d[0]) / 2, (b[1] + d[1]) / 2)

    if hO1 == hO2:
        print("Equality of the half diagonals: true")
        p2 = True
    else:
        print("Equality of the half diagonals: false")

    if p1 and p2:
        print("Picks A1%s, A2%s, A3%s, A4%s are create a parallelogram" % (a, b, c, d))
    else:
        print('Picks does not create a parallelogram')


isParallelogram(A1, A2, A3, A4)

# Задание-1:
# Написать программу, выполняющую операции (сложение и вычитание) с простыми дробями.
# Дроби вводятся и выводятся в формате:
# n x/y ,где n - целая часть, x - числитель, у - знаменатель.
# Дроби могут быть отрицательные и не иметь целой части, или иметь только целую часть.
# Примеры:
# Ввод: 5/6 + 4/7 (всё выражение вводится целиком в виде строки)
# Вывод: 1 17/42  (результат обязательно упростить и выделить целую часть)
# Ввод: -2/3 - -2
# Вывод: 1 1/3


# Задание-2:
# Дана ведомость расчета заработной платы (файл "data/workers").
# Рассчитайте зарплату всех работников, зная что они получат полный оклад,
# если отработают норму часов. Если же они отработали меньше нормы,
# то их ЗП уменьшается пропорционально, а за заждый час переработки
# они получают удвоенную ЗП, пропорциональную норме.
# Кол-во часов, которые были отработаны, указаны в файле "data/hours_of"


# Задание-3:
# Дан файл ("data/fruits") со списком фруктов.
# Записать в новые файлы все фрукты, начинающиеся с определенной буквы.
# Т.е. в одном файле будут все фрукты на букву “А”, во втором на “Б” и т.д.
# Файлы назвать соответственно.
# Пример имен файлов: fruits_А, fruits_Б, fruits_В ….
# Важно! Обратите внимание, что нет фруктов, начинающихся с некоторых букв.
# Напишите универсальный код, который будет работать с любым списком фруктов
# и распределять по файлам в зависимости от первых букв, имеющихся в списке фруктов.
# Подсказка:
# Чтобы получить список больших букв русского алфавита:
# print(list(map(chr, range(ord('А'), ord('Я')+1))))

print(list(map(chr, range(ord("А"), ord("Я") + 1))))

import encodings

# не могу понять... что не так... почему не открывает? эти задания не могу сделать(((

# def fruits(file):
#   while open(file, 'r', encoding='UTF-8'):