# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]
import math

oldList = [2, -5, 8, 9, -25, 25, 4]
newList = []

for i in oldList:
    if i > 0 and (math.sqrt(i) - int(math.sqrt(i))) == 0:
        newList.append(int(math.sqrt(i)))
print(newList)

# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)
# что-то не так.... немогу его заставить писать цифры и по-русски

import time

a = time.strftime('%d. %B %Y', time.localtime())
print(a)

# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random
import random
listN = []

n = int(input("Input number of elements "))
while n > len(listN):
    listN.append(random.randint(-100, 100))
    print(listN)

# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут:
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]

lst1 = [1, 2, 4, 5, 6, 2, 5, 2]
lst2 = []

# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x + 11111140.2121'
x = 2.5

# вычислите и выведите y
split_result = equation.split() # разбили уровнение
number_with_x = float(split_result[2].replace('x', '')) * x
y = number_with_x + float(split_result[4])
print(y)

# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)
 # Пример корректной даты
date = '01.11.1985'
 # Примеры некорректных дат
date = '01.22.1001'
date = '1.12.1001'
date = '-2.10.3001'
 # Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3


# памятка
myList = [12, 3, 444, 'test']
print(myList[-1])

# буду хитрить, через массив
flat = int(input("input a flat number "))

# двухмерный массив
tower = [[], ]
# этаж
floor = 0
# ячеки на этаже
cellInFloor = 0
# блок в башне (объем квартир наростающим итогом в блоке)
block = 1

# (int). range(старт, стоп, шаг)
for i in range(1, flat + 1):
    # [-1] последний элемент списка
    if len(tower[-1]) == cellInFloor:
        floor += 1
        tower.append([])
        print(tower)
    if i == block:
        block = block + (cellInFloor + 1) ** 2
        print(block)
        cellInFloor += 1
    tower[-1].append(i)
    print(tower)
print("Flat: ", flat, " Floor: ", floor, " Cell: ", tower[floor].index(flat) + 1)
